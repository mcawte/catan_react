[{"/home/mcawte/Dropbox/catan_root/catan_react/src/components/GameChat.tsx":"1","/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/ChatSideBar.tsx":"2","/home/mcawte/Dropbox/catan_root/catan_react/src/components/logic/ChatLogic.tsx":"3","/home/mcawte/Dropbox/catan_root/catan_react/src/hooks/useCurrentPlayers.tsx":"4","/home/mcawte/Dropbox/catan_root/catan_react/src/App.tsx":"5","/home/mcawte/Dropbox/catan_root/catan_react/src/index.tsx":"6","/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/Dice.tsx":"7","/home/mcawte/Dropbox/catan_root/catan_react/src/components/containers/Tiles.tsx":"8","/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/DiceFaces.tsx":"9","/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/Road.tsx":"10","/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/Tile.tsx":"11","/home/mcawte/Dropbox/catan_root/catan_react/src/hooks/useResize.tsx":"12","/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/ChatBox.tsx":"13","/home/mcawte/Dropbox/catan_root/catan_react/src/components/logic/BoardLogic.tsx":"14","/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/Ship.tsx":"15","/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/ActionPrompt.tsx":"16","/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/Settlement.tsx":"17","/home/mcawte/Dropbox/catan_root/catan_react/src/hooks/useChatMessages.tsx":"18","/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/ShipTradeOptions.tsx":"19","/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/MonopolyCardOptions.tsx":"20","/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/YearOfPlentyCardOptions.tsx":"21","/home/mcawte/Dropbox/catan_root/catan_react/src/service/socket.ts":"22","/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/TradeOptions.tsx":"23"},{"size":16411,"mtime":1616822590141,"results":"24","hashOfConfig":"25"},{"size":5679,"mtime":1616840612017,"results":"26","hashOfConfig":"25"},{"size":4389,"mtime":1616840979981,"results":"27","hashOfConfig":"25"},{"size":1022,"mtime":1616834876978,"results":"28","hashOfConfig":"25"},{"size":1157,"mtime":1616835336425,"results":"29","hashOfConfig":"25"},{"size":221,"mtime":1615101837828,"results":"30","hashOfConfig":"25"},{"size":489,"mtime":1616822395742,"results":"31","hashOfConfig":"25"},{"size":4653,"mtime":1617415199052,"results":"32","hashOfConfig":"25"},{"size":2243,"mtime":1616822090998,"results":"33","hashOfConfig":"25"},{"size":1347,"mtime":1616900963585,"results":"34","hashOfConfig":"25"},{"size":3440,"mtime":1616918511270,"results":"35","hashOfConfig":"25"},{"size":726,"mtime":1616822402701,"results":"36","hashOfConfig":"25"},{"size":5328,"mtime":1616833750239,"results":"37","hashOfConfig":"25"},{"size":25182,"mtime":1617420062325,"results":"38","hashOfConfig":"25"},{"size":2616,"mtime":1617414893971,"results":"39","hashOfConfig":"25"},{"size":379,"mtime":1617184991518,"results":"40","hashOfConfig":"25"},{"size":5202,"mtime":1617361846453,"results":"41","hashOfConfig":"25"},{"size":3823,"mtime":1615879459113,"results":"42","hashOfConfig":"25"},{"size":5777,"mtime":1617184896545,"results":"43","hashOfConfig":"25"},{"size":2546,"mtime":1617348639042,"results":"44","hashOfConfig":"25"},{"size":3322,"mtime":1617348516228,"results":"45","hashOfConfig":"25"},{"size":386,"mtime":1614757653509,"results":"46","hashOfConfig":"25"},{"size":6663,"mtime":1617348653606,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1756rvi",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"/home/mcawte/Dropbox/catan_root/catan_react/src/components/GameChat.tsx",[],"/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/ChatSideBar.tsx",[],["103","104"],"/home/mcawte/Dropbox/catan_root/catan_react/src/components/logic/ChatLogic.tsx",["105"],"/home/mcawte/Dropbox/catan_root/catan_react/src/hooks/useCurrentPlayers.tsx",["106"],"import { useEffect, useState } from \"react\";\nimport { socket } from \"../service/socket\"\n\n\ninterface Players {\n  gameName: string;\n  players: string[];\n}\n\n// This hook is called too often\nexport default function useChatMessages(\n  gameName: string\n): string[] {\n  \n  const [players, setPlayers] = useState<Players[]>();\n\n  useEffect(() => {\n    socket.on(\"currentGames\", (msg: any) => {\n      console.log(\"The current games are: \", msg);\n      let playerList = msg.map((game: any) => ({\n        gameName: game.gameName,\n        players: game.playerNames,\n      }));\n      setPlayers(playerList);\n    });\n\n    return () => {\n     // socket.disconnect();\n    };\n  }, [socket]);\n\n  \n\n  if (players && players.some((game) => game.gameName === gameName)) {\n    let gamePlayers = players.find((game) => game.gameName === gameName)\n      ?.players;\n    //console.log(\"The current players are: \", gamePlayers);\n    gamePlayers = gamePlayers !== undefined ? gamePlayers : [];\n    return gamePlayers;\n  } else {\n    return [];\n  }\n}\n",["107","108"],"/home/mcawte/Dropbox/catan_root/catan_react/src/App.tsx",["109"],"import { PublicGameState } from \"catan_types/types\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport BoardLogic from \"./components/logic/BoardLogic\";\nimport { socket } from \"./service/socket\";\nimport ChatLogic from \"./components/logic/ChatLogic\";\n\nfunction App() {\n  const [startGame, setStartGame] = useState(false);\n  const [gameState, setGameState] = useState<PublicGameState>();\n  //const [tiles, setTiles] = useState<TileInterface[]>([]);\n\n  useEffect(() => {\n    socket.on(\"beginGame\", () => setStartGame(true));\n\n    socket.on(\"gameState\", (msg: PublicGameState) => {\n      console.log(\"The new game state is: \", msg);\n      setGameState(msg);\n    });\n\n    return () => {};\n  }, [socket]);\n\n  //socket.current.emit(\"tokenSt\", token)\n\n  return (\n    <>\n      {startGame && gameState !== undefined && setGameState !== undefined ? (\n        <BoardLogic\n          gameState={gameState}\n          setGameState={\n            setGameState as React.Dispatch<\n              React.SetStateAction<PublicGameState>\n            >\n          }\n        />\n      ) : (\n        <ChatLogic />\n      )}\n    </>\n  );\n}\n\nexport default App;\n",["110","111"],"/home/mcawte/Dropbox/catan_root/catan_react/src/index.tsx",[],["112","113"],"/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/Dice.tsx",[],["114","115"],"/home/mcawte/Dropbox/catan_root/catan_react/src/components/containers/Tiles.tsx",["116"],"import React from \"react\";\nimport { Road } from \"../display/Road\";\nimport { Ship } from \"../display/Ship\";\nimport Tile from \"../display/Tile\";\nimport { useResize } from \"../../hooks/useResize\";\n\nimport { Settlement } from \"../display/Settlement\";\nimport {\n  PlayerColor,\n  Tile as TileInterface,\n  Settlement as SettlementInterface,\n  RoadPiece,\n  Robber,\n} from \"catan_types/types\";\nimport { socket } from \"../../service/socket\";\n\nconst boardWidth = 7;\n\ninterface NewBoardProps {\n  gameName: string;\n  playerName: string;\n  tiles: TileInterface[];\n  robber: Robber;\n  moveRobber: boolean;\n  playerColor: PlayerColor;\n  updateRoad: (\n    tile: {\n      row: number;\n      column: number;\n    },\n    road: RoadPiece\n  ) => void;\n  updateSettlement: (\n    tile: {\n      row: number;\n      column: number;\n    },\n    settlement: SettlementInterface\n  ) => void;\n  updateRobber: (tile: {\n    row: number;\n    column: number;\n    tileNumber: number | null;\n  }) => void;\n}\n\nexport default function Tiles({\n  gameName,\n  playerName,\n  tiles,\n  robber,\n  moveRobber,\n  playerColor,\n  updateRoad,\n  updateSettlement,\n  updateRobber,\n}: React.PropsWithChildren<NewBoardProps>) {\n  const { width, height } = useResize();\n  const tileSize = (0.5 * width) / boardWidth;\n\n  //const itemTypes: ItemTypes[] = [\"road\", \"town\", \"city\", \"devCard\"];\n\n  // tile should be part of game state\n  //setTiles(tiles)\n\n  const gridSpace = 1.04;\n  const tileWidth = tileSize;\n  const tileHeight = (tileSize * 2) / Math.sqrt(3);\n  const edgeLength = tileWidth / Math.sqrt(3);\n  const roadWidth = (((gridSpace - 1) * 7) / 4) * tileWidth;\n  const roadLeft = (1 - gridSpace) * tileWidth;\n  const roadTop = (1 / 4) * tileHeight;\n\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        top: `${tileSize / 10}px`,\n        left: `${tileSize / 10}px`,\n      }}\n    >\n      {/* The width is {width} and height {height} */}\n      {tiles.map((tile) => {\n        return (\n          <div key={`Tile_r${tile.row}c${tile.column}`}>\n            <Tile\n              tileSize={tileSize} // in px\n              tileNumber={tile.tileNumber}\n              tileType={tile.tileType}\n              row={tile.row}\n              column={tile.column}\n              gridSpace={1.04}\n              updateRobber={updateRobber}\n              moveRobber={moveRobber}\n              robber={\n                robber.row === tile.row && robber.column === tile.column\n                  ? true\n                  : false\n              }\n            >\n              {tile.roads.map((road) => {\n                return (\n                  <Road\n                    key={`Road_r${road.direction}_t${tile.tileNumber}_tr${tile.row}_tc${tile.column}`}\n                    occupied={road.playerName === null ? false : true}\n                    direction={road.direction}\n                    width={roadWidth}\n                    height={edgeLength}\n                    color={\n                      road.playerColor === null ? playerColor : road.playerColor\n                    }\n                    left={roadLeft}\n                    top={roadTop}\n                    onClick={() => updateRoad(tile, road)}\n                  />\n                );\n              })}\n\n              {tile.settlements.map((settlement) => {\n                return (\n                  <div\n                    key={`Settlement_r${tile.row}c${tile.column}_d${settlement.direction}_p${settlement.playerName}`}\n                    // onClick={() => updateSettlement(tile, settlement)}\n                    onClick={() => {\n                      console.log(\"Settlement clicked\")\n                      socket.emit(\"updateSettlement\",gameName, playerName, tile.row,tile.column, settlement.direction)}}\n                  >\n                    <Settlement\n                      type={settlement.type}\n                      occupied={settlement.playerName === null ? false : true}\n                      color={\n                        settlement.playerColor === null\n                          ? playerColor\n                          : settlement.playerColor\n                      }\n                      direction={settlement.direction}\n                      tileHeight={tileHeight}\n                    />\n                  </div>\n                );\n              })}\n\n              {tile.ship ? (\n                <Ship\n                  key={`Ship_t${tile.tileNumber}`}\n                  ship={tile.ship}\n                  tileWidth={tileWidth}\n                  width={roadWidth}\n                    height={edgeLength}\n                />\n              ) : null}\n            </Tile>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/DiceFaces.tsx",[],"/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/Road.tsx",[],"/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/Tile.tsx",[],"/home/mcawte/Dropbox/catan_root/catan_react/src/hooks/useResize.tsx",[],"/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/ChatBox.tsx",[],"/home/mcawte/Dropbox/catan_root/catan_react/src/components/logic/BoardLogic.tsx",["117"],"/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/Ship.tsx",[],"/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/ActionPrompt.tsx",[],"/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/Settlement.tsx",[],"/home/mcawte/Dropbox/catan_root/catan_react/src/hooks/useChatMessages.tsx",["118"],"import { useEffect, useState } from \"react\";\nimport { ChatMessage } from \"catan_types/types\";\nimport { socket } from \"../service/socket\";\n\n// interface ChatMessage {\n//   playerName: string;\n//   gameName: string;\n//   message: string;\n//   time: number;\n// }\n\nexport default function useChatMessages(\n  gameName: string\n): { playerName: string; message: string; time: number }[] {\n  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);\n\n  // const [chatMessages, setChatMessages] = useImmer([\n  //   {\n  //     gameName: \"lobby\",\n  //     messages: [\n  //       { playerName: \"some guy\", message: \"yo yo\", time: Date.now() },\n  //       { playerName: \"Important Individual\", message: \"Excuse me?\", time: Date.now() },\n  //     ],\n  //   },\n  // ]);\n\n  useEffect(() => {\n    socket.on(\"chatMessage\", (msg: ChatMessage) => {\n      console.log(\n        \"Message from server to frontend by player \" +\n          msg.playerName +\n          \" to room \" +\n          msg.gameName +\n          \": \" +\n          msg.message +\n          \" at time: \" +\n          msg.time\n      );\n\n      //console.log(\"the chat messages state object is: \", chatMessages);\n\n      // if (chatMessages.some((game) => game.gameName === msg.gameName)) {\n      //   console.log(\"The game name is included\");\n\n      //   let newState: RoomMessages[] = chatMessages.map((eachGame) => {\n      //     if (eachGame.gameName === msg.gameName) {\n      //       console.log(\"Should have found lobby to append to here\");\n      //       const newGameMessages = eachGame.messages.concat({\n      //         playerName: msg.playerName,\n      //         message: msg.message,\n      //         time: msg.time,\n      //       });\n      //       return { gameName: msg.gameName, messages: newGameMessages };\n      //     } else {\n      //       console.log(\"No lobby in this one\");\n      //       return eachGame;\n      //     }\n      //   });\n\n      //   console.log(\"The new state chat messages object is: \", newState);\n\n      setChatMessages((prevState) => {\n        return [\n          ...prevState,\n          {\n            gameName: msg.gameName,\n            playerName: msg.playerName,\n            message: msg.message,\n            time: msg.time,\n          },\n        ];\n      });\n\n      // setChatMessages(prevState =>[\n      //   {\n      //     gameName: \"lobby\",\n      //     messages: [{\n      //       playerName: \"some guy\",\n      //       message: \"yo yo\",\n      //       time: Date.now(),\n      //     }],\n      //   },\n      // ]);\n\n      //console.log(\"The appended to game room state should be: \", newState);\n      // console.log(\"up here\");\n      // } else {\n      //   let newRoomHistory: RoomMessages = {\n      //     gameName: msg.gameName,\n      //     messages: [\n      //       {\n      //         playerName: msg.playerName,\n      //         message: msg.message,\n      //         time: msg.time,\n      //       },\n      //     ],\n      //   };\n      //   setChatMessages([\n      //     {\n      //       gameName: \"test\",\n      //       messages: [{\n      //         playerName: \"some guy\",\n      //         message: \"yo yo\",\n      //         time: Date.now(),\n      //       }],\n      //     },\n      //   ]);\n\n      // setChatMessages((prevState) => [...prevState, newRoomHistory]);\n      // }\n\n      // console.log(\"The current room messages are: \", chatMessages);\n    });\n\n    return () => {\n      // socket.disconnect();\n    };\n  }, [socket]);\n\n  // let messages = chatMessages.find(\n  //   (messages) => messages.gameName === gameName\n  // );\n\n  // if (messages !== undefined) {\n  //   return messages.messages;\n  // } else {\n  //   return [{ playerName: \"\", message: \"\", time: 0 }];\n  // }\n\n  //console.log(\"the chat messages state object is: \", chatMessages)\n\n  return chatMessages.filter(room => room.gameName === gameName)\n}\n","/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/ShipTradeOptions.tsx",[],"/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/MonopolyCardOptions.tsx",[],"/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/YearOfPlentyCardOptions.tsx",[],"/home/mcawte/Dropbox/catan_root/catan_react/src/service/socket.ts",[],"/home/mcawte/Dropbox/catan_root/catan_react/src/components/display/TradeOptions.tsx",[],{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","severity":1,"message":"124","line":76,"column":6,"nodeType":"125","endLine":76,"endColumn":14,"suggestions":"126"},{"ruleId":"123","severity":1,"message":"127","line":30,"column":6,"nodeType":"125","endLine":30,"endColumn":14,"suggestions":"128"},{"ruleId":"119","replacedBy":"129"},{"ruleId":"121","replacedBy":"130"},{"ruleId":"123","severity":1,"message":"127","line":22,"column":6,"nodeType":"125","endLine":22,"endColumn":14,"suggestions":"131"},{"ruleId":"119","replacedBy":"132"},{"ruleId":"121","replacedBy":"133"},{"ruleId":"119","replacedBy":"134"},{"ruleId":"121","replacedBy":"135"},{"ruleId":"119","replacedBy":"136"},{"ruleId":"121","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":58,"column":18,"nodeType":"140","messageId":"141","endLine":58,"endColumn":24},{"ruleId":"123","severity":1,"message":"142","line":97,"column":6,"nodeType":"125","endLine":97,"endColumn":19,"suggestions":"143"},{"ruleId":"123","severity":1,"message":"127","line":118,"column":6,"nodeType":"125","endLine":118,"endColumn":14,"suggestions":"144"},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'chatState'. Either include it or remove the dependency array. Outer scope values like 'socket' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["147"],"React Hook useEffect has an unnecessary dependency: 'socket'. Either exclude it or remove the dependency array. Outer scope values like 'socket' aren't valid dependencies because mutating them doesn't re-render the component.",["148"],["145"],["146"],["149"],["145"],["146"],["145"],["146"],["145"],["146"],"@typescript-eslint/no-unused-vars","'height' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'gameState'. Either include it or remove the dependency array.",["150"],["151"],"no-global-assign","no-unsafe-negation",{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"154","fix":"156"},{"desc":"157","fix":"158"},{"desc":"154","fix":"159"},"Update the dependencies array to be: [chatState]",{"range":"160","text":"161"},"Update the dependencies array to be: []",{"range":"162","text":"163"},{"range":"164","text":"163"},"Update the dependencies array to be: [boardUpdate, gameState]",{"range":"165","text":"166"},{"range":"167","text":"163"},[2146,2154],"[chatState]",[664,672],"[]",[717,725],[2334,2347],"[boardUpdate, gameState]",[3426,3434]]